# Given a string A, find if there is any subsequence that repeats itself.
# A subsequence of a string is defined as a sequence of characters generated by
# deleting some characters in the string without changing the order of the remaining characters.
# NOTE: Subsequence length should be greater than or equal to 2.
# 1 <= length(A) <= 100
# The first and the only argument of input contains a string A.
# Return an integer, 1 if there is any subsequence which repeat itself else return 0.
class Solution:
    def util(self, A, B):
        P = len(A)
        Q = len(B)

        resultGrid = [[0] * (Q + 1) for _ in range(P + 1)]

        for i in range(1, P + 1):
            for j in range(1, Q + 1):
                if i == j or A[i - 1] != B[j - 1]:
                    resultGrid[i][j] = max(resultGrid[i - 1][j], resultGrid[i][j - 1])

                else:
                    resultGrid[i][j] = resultGrid[i - 1][j - 1] + 1

        return resultGrid[-1][-1]

    # @param A : string
    # @return an integer
    def anytwo(self, A):
        return int(self.util(A, A) > 1)


sol = Solution()
print(sol.anytwo("abab"))  # 1
print(sol.anytwo("abba"))  # 0
